{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Introduction FOREST - F orecast O bservation R esearch E xploration and S urvey T ool forest_lite is a visualisation tool for Earth science data. It supports two common workflows; either investigate a file locally or compare datasets. A dataset is a collection of related data, it can be local or remote. The application itself also works equally well on the command line or deployed to cloud infrastructure. Above: FOREST-Lite displaying South-east Asia 4.4km model Open a file To quickly display a single file use the open command. This will start a server and open a browser tab with the contents of your file on display. forest_lite open ${ name_of_file } Note forest_lite uses the iris driver by default. For alternative drivers please use the --driver flag Compare multiple datasets Exploring a file locally can be convenient but sometimes a more useful approach may be to group the content of multiple files into a single collection called a dataset. In the context of Earth science a dataset could be an atmospheric simulation or observations from an observing network. As long as there are dimensions to support navigation, e.g. pressure level, time, parameter etc., then a user can explore it. Note A dataset does not necessarily need to be on a local file system it could also be accessed remotely via an API. It all depends on how the driver responsible for the dataset can access the data. Generate a config file init is a helper program to bridge the gap between using the open command and the run command which requires a config file. Think of it as a helpful assistant who can write your config file for you. forest_lite init Run the command and then follow the step-by-step on screen instructions to generate a basic configuration file. For example, the following configuration file loads files matching *.nc into a dataset named 'My Dataset' . Example file: config.yaml datasets : - label : My Dataset driver : name : iris settings : pattern : '*.nc' This is of course a very simple config file but it illustrates the format nicely. More complicated files can be reduced down to lists of the above syntax. Start an instance FOREST-Lite is a configurable system that can interface with arbitrary data sources. Given the application can be configured in many different ways, it's often useful to refer to an active process as an instance and a config file as a configuration. That way it's easy to distinguish between the program and the text file that configured the program. To start an instance use the run command with either a pre-generated or hand-crafted config file. forest_lite run ${ config_file } Similarly to the open command this will open a browser tab with the application menu system populated with the datasets specified in the config file. Note Use --no-open-tab if running in a non-interactive environment Stop an instance To stop an instance type CTRL+C in the terminal session that started it. Note The web app may continue to behave normally but it will no longer receive fresh data from the server Screenshot Example of an instance running in the cloud pointing at 1.5km unified model data. Above: Instance displaying Indonesia 1.5km model with a slight opacity and a custom color coastline Source code FOREST Lite source code is available at GitHub .","title":"Getting started"},{"location":"index.html#introduction","text":"FOREST - F orecast O bservation R esearch E xploration and S urvey T ool forest_lite is a visualisation tool for Earth science data. It supports two common workflows; either investigate a file locally or compare datasets. A dataset is a collection of related data, it can be local or remote. The application itself also works equally well on the command line or deployed to cloud infrastructure. Above: FOREST-Lite displaying South-east Asia 4.4km model","title":"Introduction"},{"location":"index.html#open-a-file","text":"To quickly display a single file use the open command. This will start a server and open a browser tab with the contents of your file on display. forest_lite open ${ name_of_file } Note forest_lite uses the iris driver by default. For alternative drivers please use the --driver flag","title":"Open a file"},{"location":"index.html#compare-multiple-datasets","text":"Exploring a file locally can be convenient but sometimes a more useful approach may be to group the content of multiple files into a single collection called a dataset. In the context of Earth science a dataset could be an atmospheric simulation or observations from an observing network. As long as there are dimensions to support navigation, e.g. pressure level, time, parameter etc., then a user can explore it. Note A dataset does not necessarily need to be on a local file system it could also be accessed remotely via an API. It all depends on how the driver responsible for the dataset can access the data.","title":"Compare multiple datasets"},{"location":"index.html#generate-a-config-file","text":"init is a helper program to bridge the gap between using the open command and the run command which requires a config file. Think of it as a helpful assistant who can write your config file for you. forest_lite init Run the command and then follow the step-by-step on screen instructions to generate a basic configuration file. For example, the following configuration file loads files matching *.nc into a dataset named 'My Dataset' . Example file: config.yaml datasets : - label : My Dataset driver : name : iris settings : pattern : '*.nc' This is of course a very simple config file but it illustrates the format nicely. More complicated files can be reduced down to lists of the above syntax.","title":"Generate a config file"},{"location":"index.html#start-an-instance","text":"FOREST-Lite is a configurable system that can interface with arbitrary data sources. Given the application can be configured in many different ways, it's often useful to refer to an active process as an instance and a config file as a configuration. That way it's easy to distinguish between the program and the text file that configured the program. To start an instance use the run command with either a pre-generated or hand-crafted config file. forest_lite run ${ config_file } Similarly to the open command this will open a browser tab with the application menu system populated with the datasets specified in the config file. Note Use --no-open-tab if running in a non-interactive environment","title":"Start an instance"},{"location":"index.html#stop-an-instance","text":"To stop an instance type CTRL+C in the terminal session that started it. Note The web app may continue to behave normally but it will no longer receive fresh data from the server","title":"Stop an instance"},{"location":"index.html#screenshot","text":"Example of an instance running in the cloud pointing at 1.5km unified model data. Above: Instance displaying Indonesia 1.5km model with a slight opacity and a custom color coastline","title":"Screenshot"},{"location":"index.html#source-code","text":"FOREST Lite source code is available at GitHub .","title":"Source code"},{"location":"design.html","text":"Driver proposal To visualise data without prior knowledge of its format, directory structure or whether it is local or remote a general framework is needed. History Early versions to solve this problem focussed on an object-oriented hierarchy. class Driver : def method ( self , ... ): pass Simplest possible interface A simpler design is to template the methods that are used by the application machinery and allow users to extend them as they see fit. To discourage deeply nested inheritance and fragile driver state a decorator syntax has been chosen. from forest_lite.server.drivers.base import BaseDriver driver = BaseDriver () @driver . override ( \"tilable\" ) def my_custom_func ( driver_settings , datavar , query = None ): \"\"\"A function that replies to a tile endpoint\"\"\" pass","title":"Driver proposal"},{"location":"design.html#driver-proposal","text":"To visualise data without prior knowledge of its format, directory structure or whether it is local or remote a general framework is needed.","title":"Driver proposal"},{"location":"design.html#history","text":"Early versions to solve this problem focussed on an object-oriented hierarchy. class Driver : def method ( self , ... ): pass","title":"History"},{"location":"design.html#simplest-possible-interface","text":"A simpler design is to template the methods that are used by the application machinery and allow users to extend them as they see fit. To discourage deeply nested inheritance and fragile driver state a decorator syntax has been chosen. from forest_lite.server.drivers.base import BaseDriver driver = BaseDriver () @driver . override ( \"tilable\" ) def my_custom_func ( driver_settings , datavar , query = None ): \"\"\"A function that replies to a tile endpoint\"\"\" pass","title":"Simplest possible interface"},{"location":"dev-guide.html","text":"Developer guide To get set up first clone the repo with the SSH link to eliminate password prompts on push. git clone git@github.com:MetOffice/forest-lite.git Then navigate inside the repo with cd forest-lite . At this point it may be convenient to set up a development environment but for simple edits, e.g. docstring changes, this step can be done later. GitHub contributor flow The inner workings of git are better documented elsewhere on the web. The advice here is to fork the repository, check out your fork and configure your remote and origin upstream locations to point to the correct places. Conda environment Follow steps to install miniconda on your machine. Then to create a dedicated environment for FOREST-Lite development create a new one with a supported Python version. conda create -n forestlite python = 3 .8 Activate the environment and install the necessary package dependencies. conda activate forestlite Many of the packages are available in the conda-forge channel. To install from that channel use -c conda-forge . As we are setting up a development environment it is a good idea to also install test suite dependencies found in requirements-test.txt . conda install -c conda-forge --file requirements.txt --file requirements-test.txt At this point your new conda environment should have all of the necessary dependencies. The final step is to point Python at your edits. python setup.py develop If this is your first time running the above command all of the assets will be built. Note The webpack step takes a few minutes to complete with no output, this is normal behaviour. Test suite A good way to make sure your environment is set up and you are starting with the right stuff is to run both the server and client tests. pytest --disable-warnings To run the JavaScript tests navigate to forest_lite/client directory and run the following command. npm run test Jest test runner is configured to run with a file watcher which may be convenient when developing JS. npm run watch The development server can be launched to respond to live changes to the JS/CSS code via the webpack-dev-server lib. npm start","title":"Developer guide"},{"location":"dev-guide.html#developer-guide","text":"To get set up first clone the repo with the SSH link to eliminate password prompts on push. git clone git@github.com:MetOffice/forest-lite.git Then navigate inside the repo with cd forest-lite . At this point it may be convenient to set up a development environment but for simple edits, e.g. docstring changes, this step can be done later.","title":"Developer guide"},{"location":"dev-guide.html#github-contributor-flow","text":"The inner workings of git are better documented elsewhere on the web. The advice here is to fork the repository, check out your fork and configure your remote and origin upstream locations to point to the correct places.","title":"GitHub contributor flow"},{"location":"dev-guide.html#conda-environment","text":"Follow steps to install miniconda on your machine. Then to create a dedicated environment for FOREST-Lite development create a new one with a supported Python version. conda create -n forestlite python = 3 .8 Activate the environment and install the necessary package dependencies. conda activate forestlite Many of the packages are available in the conda-forge channel. To install from that channel use -c conda-forge . As we are setting up a development environment it is a good idea to also install test suite dependencies found in requirements-test.txt . conda install -c conda-forge --file requirements.txt --file requirements-test.txt At this point your new conda environment should have all of the necessary dependencies. The final step is to point Python at your edits. python setup.py develop If this is your first time running the above command all of the assets will be built. Note The webpack step takes a few minutes to complete with no output, this is normal behaviour.","title":"Conda environment"},{"location":"dev-guide.html#test-suite","text":"A good way to make sure your environment is set up and you are starting with the right stuff is to run both the server and client tests. pytest --disable-warnings To run the JavaScript tests navigate to forest_lite/client directory and run the following command. npm run test Jest test runner is configured to run with a file watcher which may be convenient when developing JS. npm run watch The development server can be launched to respond to live changes to the JS/CSS code via the webpack-dev-server lib. npm start","title":"Test suite"}]}