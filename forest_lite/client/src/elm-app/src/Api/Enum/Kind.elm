-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Enum.Kind exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| Visual categorisation of color swatches
-}
type Kind
    = Sequential
    | Diverging
    | Qualitative


list : List Kind
list =
    [ Sequential, Diverging, Qualitative ]


decoder : Decoder Kind
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "SEQUENTIAL" ->
                        Decode.succeed Sequential

                    "DIVERGING" ->
                        Decode.succeed Diverging

                    "QUALITATIVE" ->
                        Decode.succeed Qualitative

                    _ ->
                        Decode.fail ("Invalid Kind type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Kind -> String
toString enum____ =
    case enum____ of
        Sequential ->
            "SEQUENTIAL"

        Diverging ->
            "DIVERGING"

        Qualitative ->
            "QUALITATIVE"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Kind
fromString enumString____ =
    case enumString____ of
        "SEQUENTIAL" ->
            Just Sequential

        "DIVERGING" ->
            Just Diverging

        "QUALITATIVE" ->
            Just Qualitative

        _ ->
            Nothing
